from pysus.online_data.SIH import download
import pandas as pd
from datetime import datetime
import os
import re

# --------------- CONFIGURAÇÃO ---------------
UF = ['ac','al','ap','am','ba','ce','df','es','go','ma','mt','ms','mg','pa','pb','pr','pe','pi','rj','rn','rs','ro','rr','sc','sp','se','to']
ANO = [2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025]
MES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

# Lista bruta de procedimentos
procedimentos_raw = '''0211070025|0211070033|0211070041|0211070076|0211070157
0211070203|0211070211|0211070246|0211070262|0211070378|0211070386|0211070394
0211070408|0211070416|0301070016|0301070113|0301070172|0301070180|0301070199
0404010148|0404010571|0404010580|0404010598|0404010601|0404010610|0404010628
0404010636|0404010644|0404010652|0701030348|0701090103|0701090111|0701090120
0701090138|0701090146|0701090154|0701090162|0701090170|0701090189|0701090197
0701090200|0701090219|0701090227|0701090235|0702090034|0702090050|0702090069
0702090077|0702090085|0702090093'''

procedimentos = set(re.findall(r"\d{10}", procedimentos_raw))
# --------------- FIM CONFIGURAÇÃO ---------------

# 1. Pasta de saída e log
hoje = datetime.now()
pasta_saida = f"SIH_{UF}_{ANO}{MES:02d}_{hoje.strftime('%Y%m%d_%H%M%S')}"
os.makedirs(pasta_saida, exist_ok=True)

log_filename = os.path.join(pasta_saida, "log_download.txt")

def escreve_log(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {msg}\n")
    print(f"[{timestamp}] {msg}")

escreve_log("Início do processo de download do SIH.")

# 2. Download RD e SP separadamente e juntar
def baixa_grupo(grupo):
    escreve_log(f"Iniciando download de {MES:02d}/{ANO} para UF={UF}, grupo={grupo}...")
    sih_obj = download(UF, ANO, MES, grupo)
    return sih_obj.to_dataframe()

try:
    dados_rd = baixa_grupo("RD")
    dados_sp = baixa_grupo("SP")

    # Concatenar RD e SP
    dados = pd.concat([dados_rd, dados_sp], ignore_index=True)

    # Mapear colunas
    cols_map = {c.upper(): c for c in dados.columns}
    proc_col = None
    if "PROC_REA" in cols_map:
        proc_col = cols_map["PROC_REA"]
    elif "PROC_SOLIC" in cols_map:
        proc_col = cols_map["PROC_SOLIC"]
    else:
        candidatos = [orig for up, orig in cols_map.items() if "PROC" in up]
        if candidatos:
            proc_col = candidatos[0]

    if not proc_col:
        escreve_log(f"Nenhuma coluna de procedimento encontrada. Colunas: {list(dados.columns)}")
    else:
        escreve_log(f"Usando coluna de procedimento: {proc_col}")

        dados[proc_col] = dados[proc_col].astype(str).str.strip()
        dados_filtrados = dados[dados[proc_col].isin(procedimentos)]

        if dados_filtrados.empty:
            escreve_log("Nenhum registro encontrado com os procedimentos informados.")
            dados.head(0).to_excel(os.path.join(pasta_saida, f"SIH_{UF}_{ANO}{MES:02d}_empty.xlsx"), index=False)
        else:
            caminho_xlsx = os.path.join(pasta_saida, f"SIH_{UF}_{ANO}{MES:02d}_procedimentos_filtrados.xlsx")
            dados_filtrados.to_excel(caminho_xlsx, index=False)
            escreve_log(f"Arquivo salvo: {caminho_xlsx} (registros: {len(dados_filtrados)})")

except Exception as e:
    escreve_log(f"Erro no download/processamento: {e}")

escreve_log("Script finalizado.")
