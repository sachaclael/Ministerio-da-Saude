from pysus.online_data.SIH import download
import pandas as pd
from datetime import datetime
import os

# --------------- CONFIGURAÇÃO ---------------
UF = ['ac','al','ap','am','ba','ce','df','es','go','ma','mt','ms','mg','pa','pb','pr','pe','pi','rj','rn','rs','ro','rr','sc','sp','se','to']
ANO = [2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025]
MES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

# Procedimentos (lista solicitada)
PROC_DESEJADOS = [
    "0307040100", "0307040119",
    "0404030017", "0404030033", "0404030041", "0404030050",
    "0404030068", "0404030076", "0404030084", "0404030106",
    "0404030122", "0404030130", "0404030157", "0404030165",
    "0404030173", "0404030190", "0404030220", "0404030246",
    "0404030254", "0404030262", "0404030270", "0404030289",
    "0404030297", "0404030300", "0404030319", "0404030327",
    "0414020421", "0701030348", "0701090235"
]
# --------------- FIM CONFIGURAÇÃO ---------------

hoje = datetime.now()
pasta_saida = f"SIH_{UF}_{ANO}{MES:02d}_{hoje.strftime('%Y%m%d_%H%M%S')}"
os.makedirs(pasta_saida, exist_ok=True)
log_filename = os.path.join(pasta_saida, "log_download.txt")

def escreve_log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {msg}\n")
    print(f"[{ts}] {msg}")

escreve_log("Início do processo de download do SIH (RD).")

try:
    escreve_log(f"Solicitando SIH RD para {MES:02d}/{ANO}, UF={UF}...")
    # A API do pysus para SIH no seu exemplo usa o argumento 'tipo' como "RD" ou "SP"
    sih_obj = download(UF, ANO, MES, "RD")

    # converter para DataFrame
    df = sih_obj.to_dataframe()

    escreve_log(f"Registros lidos do objeto SIH: {len(df)}")

    # Normaliza nomes das colunas
    df.columns = [c.upper() for c in df.columns]

    # Verifica se a coluna PROC_REA existe
    if "PROC_REA" not in df.columns:
        escreve_log(f"Erro: coluna 'PROC_REA' não encontrada nas colunas disponíveis: {list(df.columns)}")
        raise SystemExit("Coluna PROC_REA ausente — verifique os metadados dos arquivos SIH.")

    # Normaliza e filtra pela lista de procedimentos
    df["PROC_REA"] = df["PROC_REA"].astype(str).str.strip()
    antes = len(df)
    df_filtrado = df[df["PROC_REA"].isin(PROC_DESEJADOS)].copy()
    depois = len(df_filtrado)
    escreve_log(f"Filtragem por PROC_REA: {antes} -> {depois} registros correspondentes aos procedimentos solicitados.")

    # Salvar resultado completo
    if df_filtrado.empty:
        escreve_log("Nenhum registro encontrado para os procedimentos informados em RD.")
        df.head(0).to_excel(os.path.join(pasta_saida, f"SIH_{UF}_{ANO}{MES:02d}_RD_empty.xlsx"), index=False)
    else:
        caminho = os.path.join(pasta_saida, f"SIH_{UF}_{ANO}{MES:02d}_RD_proc{len(PROC_DESEJADOS)}.xlsx")
        df_filtrado.to_excel(caminho, index=False)
        escreve_log(f"Arquivo salvo: {caminho} (registros: {len(df_filtrado)})")

        # Resumo por procedimento (contagem)
        resumo = df_filtrado["PROC_REA"].value_counts().rename_axis("PROC_REA").reset_index(name="count")
        resumo = resumo.sort_values("count", ascending=False)
        caminho_resumo = os.path.join(pasta_saida, f"resumo_proc_RD_{UF}_{ANO}{MES:02d}.xlsx")
        resumo.to_excel(caminho_resumo, index=False)
        escreve_log(f"Resumo por procedimento salvo: {caminho_resumo}")

except Exception as e:
    escreve_log(f"Erro geral no processamento: {e}")

escreve_log("Script finalizado.")
