from pysus.online_data.SIH import download
import pandas as pd
from datetime import datetime
import os

# --------------- CONFIGURAÇÃO ---------------
UFS = ["MG"]
ANOS = [2025]
MESES = [4]

# Fácil manutenção: altere apenas estas listas
PROCS_SP = [
    "0406040010", "0406040028", "0406040044", "0406040052", "0406040060",
    "0406040079", "0406040087", "0406040095", "0406040109", "0406040117",
    "0406040125", "0406040133", "0406040141", "0406040150", "0406040168",
    "0406040176", "0406040184", "0406040192", "0406040206", "0406040214",
    "0406040222", "0406040230", "0406040249", "0406040257", "0406040265",
    "0406040273", "0406040281", "0406040290", "0406040303", "0406040311",
    "0406040320", "0406040338"
]

PROCS_RD = PROCS_SP.copy()  # Mesma lista para RD
# --------------- FIM CONFIGURAÇÃO ---------------

# Criar pasta de saída e log
hoje = datetime.now()
pasta_saida = f"SIH_PROC_{hoje.strftime('%Y%m%d_%H%M%S')}"
os.makedirs(pasta_saida, exist_ok=True)
log_filename = os.path.join(pasta_saida, "log_download.txt")

def escreve_log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {msg}\n")
    print(f"[{ts}] {msg}")

escreve_log("Início do processo de download do SIH (SP e RD).")

todos_dados = []

# Função para aplicar filtro em qualquer dataset
def filtrar_dados(df, coluna, codigos, grupo):
    df.columns = [c.upper() for c in df.columns]
    coluna = coluna.upper()

    if coluna not in df.columns:
        escreve_log(f"Coluna '{coluna}' não encontrada em {grupo}. Colunas: {list(df.columns)}")
        return pd.DataFrame()

    df[coluna] = df[coluna].astype(str).str.strip()
    filtro = df[coluna].str.startswith(tuple(codigos))
    df_filtrado = df[filtro].copy()
    escreve_log(f"{grupo} - Registros filtrados: {len(df_filtrado)}")
    return df_filtrado

# Loop para baixar SP e RD
for UF in UFS:
    for ANO in ANOS:
        for MES in MESES:
            # SP
            try:
                escreve_log(f"Baixando SIH SP para {UF}, {MES:02d}/{ANO}...")
                sih_sp = download(UF, ANO, MES, "SP")
                df_sp = sih_sp.to_dataframe()
                df_filtrado_sp = filtrar_dados(df_sp, "SP_PROCREA", PROCS_SP, "SP")

                if not df_filtrado_sp.empty:
                    df_filtrado_sp["UF"] = UF
                    df_filtrado_sp["ANO"] = ANO
                    df_filtrado_sp["MES"] = MES
                    df_filtrado_sp["GRUPO"] = "SP"
                    todos_dados.append(df_filtrado_sp)
            except Exception as e:
                escreve_log(f"Erro SP {UF}-{ANO}-{MES:02d}: {e}")

            # RD
            try:
                escreve_log(f"Baixando SIH RD para {UF}, {MES:02d}/{ANO}...")
                sih_rd = download(UF, ANO, MES, "RD")
                df_rd = sih_rd.to_dataframe()
                df_filtrado_rd = filtrar_dados(df_rd, "PROC_REA", PROCS_RD, "RD")

                if not df_filtrado_rd.empty:
                    df_filtrado_rd["UF"] = UF
                    df_filtrado_rd["ANO"] = ANO
                    df_filtrado_rd["MES"] = MES
                    df_filtrado_rd["GRUPO"] = "RD"
                    todos_dados.append(df_filtrado_rd)
            except Exception as e:
                escreve_log(f"Erro RD {UF}-{ANO}-{MES:02d}: {e}")

# Exportar resultados
if todos_dados:
    resultado_final = pd.concat(todos_dados, ignore_index=True)
    caminho_xlsx = os.path.join(pasta_saida, f"SIH_SP_RD_filtrados.xlsx")
    resultado_final.to_excel(caminho_xlsx, index=False)
    escreve_log(f"Arquivo final salvo: {caminho_xlsx} (registros: {len(resultado_final)})")
else:
    escreve_log("Nenhum registro encontrado para os procedimentos informados.")
    pd.DataFrame().to_excel(os.path.join(pasta_saida, "SIH_empty.xlsx"), index=False)

escreve_log("Script finalizado.")
