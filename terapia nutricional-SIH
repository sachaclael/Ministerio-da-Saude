from pysus.online_data.SIH import download
import pandas as pd
from datetime import datetime
import os

# --------------- CONFIGURAÇÃO ---------------
UFS = ['ac','al','ap','am','ba','ce','df','es','go','ma','mt','ms','mg','pa','pb','pr','pe','pi','rj','rn','rs','ro','rr','sc','sp','se','to']  # lista de UFs
ANOS = [2025]  # lista de anos
MESES = [4]    # escolha manual dos meses

# Procedimentos desejados na coluna SP_ATOPROF
PROC_SP_ATOPROF = [
    "0309010039",
    "0309010047",
    "0309010055",
    "0309010063",
    "0309010071",
    "0309010080",
    "0309010098",
    "0309010101"
]
# --------------- FIM CONFIGURAÇÃO ---------------

# Criar pasta de saída e log
hoje = datetime.now()
pasta_saida = f"SIH_SP_{hoje.strftime('%Y%m%d_%H%M%S')}"
os.makedirs(pasta_saida, exist_ok=True)
log_filename = os.path.join(pasta_saida, "log_download.txt")

def escreve_log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {msg}\n")
    print(f"[{ts}] {msg}")

escreve_log("Início do processo de download do SIH (SP).")

# Loop por UF, Ano e Mês
todos_dados = []
for UF in UFS:
    for ANO in ANOS:
        for MES in MESES:
            try:
                escreve_log(f"Solicitando SIH SP para {MES:02d}/{ANO}, UF={UF}...")
                sih_obj = download(UF, ANO, MES, "SP")
                df = sih_obj.to_dataframe()
                escreve_log(f"Registros lidos: {len(df)}")

                # Normalizar colunas
                df.columns = [c.upper() for c in df.columns]

                if "SP_ATOPROF" not in df.columns:
                    escreve_log(f"Coluna 'SP_ATOPROF' não encontrada. Colunas disponíveis: {list(df.columns)}")
                    continue

                # Normalizar e filtrar
                df["SP_ATOPROF"] = df["SP_ATOPROF"].astype(str).str.strip()
                df_filtrado = df[df["SP_ATOPROF"].isin(PROC_SP_ATOPROF)].copy()
                escreve_log(f"Filtragem SP_ATOPROF: {len(df_filtrado)} registros encontrados.")

                if not df_filtrado.empty:
                    todos_dados.append(df_filtrado)

            except Exception as e:
                escreve_log(f"Erro no download/processamento {UF}-{ANO}-{MES:02d}: {e}")

# Concatenar todos os resultados em um único arquivo Excel
if todos_dados:
    resultado_final = pd.concat(todos_dados, ignore_index=True)
    caminho_xlsx = os.path.join(pasta_saida, f"SIH_SP_procedimentos_filtrados.xlsx")
    resultado_final.to_excel(caminho_xlsx, index=False)
    escreve_log(f"Arquivo final salvo: {caminho_xlsx} (registros: {len(resultado_final)})")
else:
    escreve_log("Nenhum registro encontrado para os procedimentos informados.")
    pd.DataFrame().to_excel(os.path.join(pasta_saida, "SIH_SP_empty.xlsx"), index=False)

escreve_log("Script finalizado.")
