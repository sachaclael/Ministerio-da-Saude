from pysus.online_data.SIA import download
import pandas as pd
from datetime import datetime
import os

# ---------------- CONFIGURAÇÃO (edite aqui) ----------------
UFS = ['ac','al','ap','am','ba','ce','df','es','go','ma','mt','ms','mg','pa','pb','pr','pe','pi','rj','rn','rs','ro','rr','sc','sp','se','to']   # lista de UFs (ex: ["MG","SP"])
ANO = 2025                         # ano
MES = 4                            # mês (1-12)

# Procedimentos: altere aqui facilmente
PROCEDIMENTOS = ["0000418", "0000590", "0000434", "0002275", "0004316", "0004529", "0006084", "0008974", "0009806", "0010510", "0012564", "0015369", "0015555", "0015563", "0015644", "0016519", "0019437", "0021709", "0027014", "0027049", "0027588", "0028606", "0028614", "0039446", "0058807", "0211214", "0300921", "0424978", "0429333", "0553921", "0898090", "2001586", "2003341", "2004984", "2005271", "2006928", "2007328", "2007671", "2009803", "2018756", "2019655", "2022257", "2023342", "2025469", "2025507", "2025701", "2026643", "2027240", "2027607", "2028700", "2029421", "2030454", "2033011", "2033887", "2035901", "2041154", "2044838", "2045672", "2054434", "2061759", "2062313", "2068974", "2069768", "2071967", "2075962", "2076039", "2076861", "2077396", "2077450", "2077485", "2077574", "2077655", "2078015", "2079798", "2081091", "2081458", "2081695", "2082187", "2082675", "2082810", "2083094", "2084937", "2087669", "2091542", "2091550", "2091690", "2092611", "2095750", "2095769", "2096641", "2096722", "2097990", "2098733", "2110500", "2116504", "2116624", "2115913", "2122642", "2127636", "2132966", "2139480", "2146355", "2148579", "2153742", "2164604", "2169207", "2171988", "2184788", "2184834", "2189941", "2194287", "2195585", "2196212", "2199696", "2204398", "2206382", "2206595", "2208180", "2219271", "2221322", "2237571", "2237601", "2237881", "2244306", "2260069", "2260204", "2260557", "2261448", "2262606", "2265060", "2269554", "2269805", "2270048", "2270420", "2270528", "2272687", "2272997", "2273004", "2276321", "2277549", "2277697", "2280051", "2280167", "2287897", "2295326", "2297086", "2297299", "2297523", "2323494", "2330156", "2332817", "2333074", "2337975", "2338157", "2338408", "2343479", "2343533", "2362619", "2384299", "2385236", "2388057", "2393417", "2394855", "2395789", "2399970", "2400324", "2408988", "2409135", "2415372", "2437163", "2443422", "2453630", "2456354", "2458322", "2470098", "2470993", "2471515", "2479966", "2481499", "2482495", "2487748", "2497077", "2497654", "2500450", "2511436", "2518899", "2519895", "2521822", "2528673", "2535939", "2536064", "2550547", "2559617", "2560372", "2561492", "2564734", "2569418", "2577984", "2578417", "2578433", "2578638", "2582163", "2586525", "2594501", "2594625", "2594722", "2600536", "2606364", "2608073", "2609061", "2619520", "2646846", "2649527", "2652056", "2652730", "2654113", "2659697", "2672251", "2673932", "2675617", "2678724", "2679701", "2686748", "2686732", "2686899", "2688530", "2688689", "2690799", "2690926", "2693550", "2693666", "2693674", "2693925", "2694751", "2695502", "2695685", "2698196", "2699737", "2705028", "2705400", "2705982", "2708175", "2709023", "2711303", "2716070", "2716380", "2718065", "2726556", "2726971", "2731967", "2737140", "2740303", "2742128", "2748223", "2748290", "2749319", "2755130", "2755718", "2761041", "2762994", "2764709", "2766051", "2768127", "2770911", "2775905", "2775999", "2779560", "2780143", "2780194", "2781212", "2784092", "2785676", "2786125", "2786346", "2786370", "2789388", "2789825", "2790521", "2790564", "2790734", "2791862", "2799758", "2802104", "2802783", "2807092", "2809419", "2824264", "2835339", "2840332", "2861100", "2863626", "2961741", "2964511", "3002187", "3005410", "3008614", "3015610", "3018865", "3021823", "3021912", "3028597", "3028488", "3028917", "3036472", "3039285", "3045072", "3045137", "3058506", "3060322", "3065383", "3069982", "3077098", "3144984", "3157245", "3259838", "3269035", "3269787", "3280349", "3295354", "3295621", "3317927", "3321894", "3331725", "3344045", "3360415", "3389618", "3391973", "3401812", "3436683", "3439208", "3442748", "3448711", "3449971", "3464784", "3466108", "3471004", "3504719", "3508528", "3514404", "3523748", "3525252", "3527492", "3545822", "3553655", "3708381", "3714543", "3740498", "3747573", "3749053", "3754839", "3772497", "3788644", "3824977", "3834379", "3845443", "3852075", "3855910", "3860035", "3862631", "3871002", "3878481", "3881318", "3884201", "3914712", "3939936", "3969355", "3985989", "4001613", "4009622", "4011457", "4012798", "4013476", "4027035", "4033000", "4076133", "4103947", "4215818", "5028264", "5166934", "5323789", "5332214", "5332354", "5384117", "5439051", "5448573", "5493943", "5527635", "5550238", "5608775", "5656079", "5683874", "5684471", "5756251", "5760569", "5839203", "5851084", "5851599", "5859344", "5864399", "5865425", "5877903", "5887623", "5889545", "5919177", "5924375", "5925207", "6017991", "6022138", "6058256", "6097367", "6121640", "6139442", "6209521", "6215076", "6224571", "6261728", "6267408", "6280609", "6295320", "6298532", "6318983", "6393144", "6410227", "6429173", "6444539", "6447678", "6474551", "6476171", "6484913", "6513557", "6516718", "6516998", "6518745", "6521053", "6528880", "6539904", "6563090", "6570496", "6578306", "6587100", "6590543", "6640591", "6653081", "6653162", "6656781", "6657141", "6670849", "6742211", "6778623", "6809235", "6825370", "6826547", "6888755", "6897517", "6919987", "6930980", "6932401", "6956963", "7051123", "7072341", "7095503", "7097956", "7106491", "7127839", "7159463", "7179634", "7208855", "7217765", "7236914", "7264585", "7275692", "7277288", "7339194", "7355432", "7370733", "7371217", "7376928", "7381565", "7382243", "7384084", "7389760", "7398204", "7403224", "7406444", "7407610", "7418000", "7420501", "7435177", "7509456", "7520999", "7525249", "7542585", "7641974", "7641982", "7641990", "7642008", "7642016", "7646410", "7694547", "7706332", "7709005", "7711794", "7736878", "7739834", "7766904", "7798903", "7880472", "7884508", "7915918", "7924186", "7954913", "7957211", "7988303", "8006210", "9016163", "9026991", "9028099", "9030131", "9030476", "9035362", "9040552", "9041753", "9043381", "9074368", "9116915", "9123490", "9134638", "9233695", "9248803", "9256628", "9259996", "9262628", "9268650", "9320547", "9335560", "9371974", "9391614", "9427406", "9437525", "9451552", "9466118", "9471618", "9493492", "9494499", "9562966", "9571957", "9581863", "9585370", "9590161", "9663002", "9698892", "9784195", "9787828", "9831037", "9834745", "9844589", "9885722", "9891242", "9915079", "9959629", "9960880", "0211050113", "0211070025", "0211070033", "0211070041", "0211070050", "0211070092", "0211070106", "0211070149", "0211070157", "0211070165", "0211070203", "0211070211", "0211070238", "0211070246", "0211070254", "0211070262", "0211070270", "0211070289", "0211070297", "0211070300", "0211070319", "0211070327", "0211070335", "0211070343", "0211070351", "0211070424", "0211070432", "0301070017", "0301070253", "0301010028", "0301010084", "0301070032", "0301070259", "0301070076", "0301070156", "0301070164", "0301070245", "0302030018", "0302030026", "0301070220", "0301010048", "0301010072", "0301010307", "0301010315", "0301040036", "0301040044", "0301070083", "0301070229", "0301070270", "0301070288", "0301080160", "0302060049", "0301070091", "0301070067", "0301070296", "0301070300", "0309050049", "0309050057", "0309050073", "0309050081", "0309050090", "0309050111", "0309050120", "0309050138", "0309050162", "0309050189", "0309050197", "0309050200", "0309050219", "0309050227", "0309050235", "0309050014", "0309050022", "0211030015", "0211030023", "0211030031", "0211030040", "0211030058", "0211030066", "0211030074", "0211030082", "0211030090", "0301070113", "0301070210", "0301060100", "0301070105", "0301070121", "0301070130", "0301070237", "0301100063", "0302040013", "0302040021", "0302040048", "0302040056", "0302050019", "0302050027", "0302060014", "0302060022", "0302060030", "0302060057", "0309090073", "0309090081", "0309090090", "0309090111", "0309090120", "0309090146", "0309090154", "0309090162", "0309090189", "0309090200", "0309090219", "0309090227", "0309090251", "0309090260", "0309090286", "0309050030", "0211110013", "0301070024", "0301070040", "0301070059", "0301070075", "0301070261", "0301070011", "0301030020", "0301070263", "0301030038", "0301030046", "0301030054", "0301070062", "0301070070", "0301030089", "0301030097", "0301030100", "0301030109", "0301030127", "0301030135", "0301030143", "0301070151", "0301030160", "0301030178", "0301030186", "0301030194", "0701010320", "0701010339", "0701010500", "0701050020", "0701050047", "0701050012", "0701060026", "0701060034", "0701060018", "0701040017", "0701040025", "0701040033", "0701040041", "0701040050", "0701040068", "0701040092", "0701040106", "0701040114", "0701040122", "0701040130", "0701040149", "0701040157", "0211060011", "0211060020", "0211060054", "0211060070", "0211060089", "0211060100", "0211060127", "0211060151", "0211060160", "0211060216", "0211060224", "0211070164", "0301070245", "0302030018", "0302030026", "0701030208", "0701030216", "0701030224", "0701030232", "0701030240", "0701030259", "0701030267", "0701030275", "0701030283", "0701030291", "0701030305", "0701030321", "0701010091", "0701010029", "0701010037", "0701010045", "0701010053", "0701010061", "0701010070", "0701010088", "0701010099", "0701010100", "0701010118", "0701010126", "0701010134", "0701010142", "0701010150", "0701010169", "0701010177", "0701010185", "0701010193", "0701020016", "0701020024", "0701020032", "0701020040", "0701020059", "0701020067", "0701020075", "0701020083", "0701020091", "0701020105", "0701020113", "0701020121", "0701020130", "0701020148", "0701020156", "0701020164", "0701020172", "0701020180", "0701020199", "0701020202", "0701020210", "0701020229", "0701020237", "0701020245", "0701020253", "0701020261", "0701020270", "0701020288", "0701020296", "0701020300", "0701020318", "0701020326", "0701020334", "0701020342", "0701020350", "0701020369", "0701020377", "0701020385", "0701020393", "0701020407", "0701020415", "0701020423", "0701020431", "0701020440", "0701020458", "0701020466", "0701020474", "0701020482", "0701020490", "0701020504", "0701020512", "0701020520", "0701020539", "0701020547", "0701020555", "0701020563", "0701020571", "0701020580", "0701020598", "0701020601", "0701020610", "0701020628", "0701020636", "0701020644", "0701020652", "0701090014", "0701090022", "0701090030", "0701090049", "0701090057", "0701090065", "0701090073", "0701090081", "0701090090", "07010207", "07010215", "07010258", "07010223", "07010231", "07010258", "07010240", "07010258", "07010266", "07010274", "07010258", "07010282", "07010290", "07010258", "07010304", "07010312", "07010304"]

# Modo de correspondência:
# "prefix" -> procura PA_PROC_ID que começam com qualquer item de PROCEDIMENTOS
# "exact"  -> procura igualdade exata (use se tiver os códigos completos)
MATCH_MODE = "prefix"
# ---------------- FIM CONFIGURAÇÃO ----------------

hoje = datetime.now()
pasta_saida = f"SIA_{'_'.join(UFS)}_{ANO}{MES:02d}_{hoje.strftime('%Y%m%d_%H%M%S')}"
os.makedirs(pasta_saida, exist_ok=True)
log_filename = os.path.join(pasta_saida, "log_download.txt")

def escreve_log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {msg}\n")
    print(f"[{ts}] {msg}")

escreve_log("Início do processo de download do SIA (PA).")

try:
    dfs = []

    for UF in UFS:
        escreve_log(f"--- Processando UF={UF} ---")
        try:
            arquivos = download(UF, ANO, MES, groups=["PA"])

            # garante lista caso pysus retorne um único objeto
            if not isinstance(arquivos, (list, tuple)):
                arquivos = [arquivos]

            for arquivo in arquivos:
                try:
                    df = arquivo.to_dataframe()
                except Exception as e:
                    escreve_log(f"Erro ao converter arquivo para DataFrame (UF={UF}): {e}")
                    continue

                # identifica coluna de procedimento (prefere PA_PROC_ID)
                if "PA_PROC_ID" in df.columns:
                    proc_col = "PA_PROC_ID"
                else:
                    cols_map = {c.upper(): c for c in df.columns}
                    candidatos = [orig for up, orig in cols_map.items() if "PROC" in up]
                    proc_col = candidatos[0] if candidatos else None

                if not proc_col:
                    escreve_log(f"UF={UF}: nenhuma coluna de procedimento encontrada. Colunas: {list(df.columns)}")
                    continue

                # normaliza
                df[proc_col] = df[proc_col].astype(str).str.strip()

                # aplica filtro por procedimento (prefixo ou exato)
                if MATCH_MODE == "prefix":
                    prefixes = tuple(PROCEDIMENTOS)
                    mask = df[proc_col].notna() & df[proc_col].str.startswith(prefixes)
                else:  # exact
                    mask = df[proc_col].isin(PROCEDIMENTOS)

                df_filtrado = df[mask].copy()
                if not df_filtrado.empty:
                    # adiciona coluna UF para rastrear origem
                    df_filtrado["UF"] = UF
                    dfs.append(df_filtrado)
                    escreve_log(f"UF={UF}: {len(df_filtrado)} registros filtrados neste arquivo.")
                else:
                    escreve_log(f"UF={UF}: 0 registros filtrados neste arquivo.")

        except Exception as e:
            escreve_log(f"Erro ao processar UF={UF}: {e}")

    # consolida tudo
    dados_filtrados = pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()
    escreve_log(f"Total geral de registros filtrados: {len(dados_filtrados)}")

    # salva Excel único
    if dados_filtrados.empty:
        escreve_log("Nenhum registro encontrado com os filtros informados.")
        dados_filtrados.head(0).to_excel(os.path.join(pasta_saida, f"SIA_{'_'.join(UFS)}_{ANO}{MES:02d}_empty.xlsx"), index=False)
    else:
        caminho = os.path.join(pasta_saida, f"SIA_{'_'.join(UFS)}_{ANO}{MES:02d}_procedimentos_filtrados.xlsx")
        dados_filtrados.to_excel(caminho, index=False)
        escreve_log(f"Arquivo salvo: {caminho} (registros: {len(dados_filtrados)})")

except Exception as e:
    escreve_log(f"Erro geral no processamento: {e}")

escreve_log("Script finalizado.")
